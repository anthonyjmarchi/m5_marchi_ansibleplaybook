---
- hosts: localhost 
  gather_facts: no
  vars: 
      ansible_python_interpreter: /usr/bin/python3
  module_defaults:
    group/aws:
      region: "us-east-2"
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: Module5
        cidr_block: 10.10.0.0/16
        tags:
          Module: 5
        state: present 
      register: vpc
    - name: debug
      debug: var=vpc
    - name: Create public subnet
      ec2_vpc_subnet:
         vpc_id: "{{ vpc.vpc.id }}"
         tags: 
           Name: Module5 public
           Module: 5
         cidr: 10.10.0.0/24
         state: present 
      register: public_subnet
    - name: Create private subnet first
      ec2_vpc_subnet:
         vpc_id: "{{ vpc.vpc.id }}"
         tags: 
           Name: Module5 privateOne
           Module: 5
         cidr: 10.10.1.0/24
         state: present
         az: us-east-2a
      register: subnet_privateOne 
    - name: Create private subnet second
      ec2_vpc_subnet:
         vpc_id: "{{ vpc.vpc.id }}"
         tags:
           Name: Module5 privateTwo
           Module: 5
         cidr: 10.10.2.0/24
         state: present    
         az: us-east-2b
      register: subnet_privateTwo
    - name: Create internet gateway
      ec2_vpc_igw:
         vpc_id: "{{ vpc.vpc.id }}"
         tags: 
           Name: Module5 gateway
         state: present
      register: igw
    - name: Create public route table
      ec2_vpc_route_table:
         vpc_id: "{{ vpc.vpc.id }}"
         tags: 
           Name: Module5RouteTablePublic
         subnets:
           - "{{ public_subnet.subnet.id }}"
         routes: 
           - dest: 0.0.0.0/0
             gateway_id: "{{ igw.gateway_id }}"
    - name: Create private route table
      ec2_vpc_route_table:
         vpc_id: "{{ vpc.vpc.id }}"
         tags:
           Name: Module5RouteTablePrivate
         subnets:
           - "{{ public_subnet.subnet.id }}"
         routes:
           - dest: 0.0.0.0/0
             gateway_id: "{{ igw.gateway_id }} " 
    - name: Create security group
      ec2_group:
         name: Module5-developer-sg
         description: Developer security group
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
           - proto: tcp
             ports:
               - 22
               - 80
             cidr_ip: 0.0.0.0/0
             rule_desc: allow all to ports 22 and 80
         state: present
    - name: "Create public acl"
      ec2_vpc_nacl:
         vpc_id: "{{ vpc.vpc.id }}"
         name: public-acl
         subnets: 
             - "{{ public_subnet.subnet.id }}"
         tags:
           Name: Module5publicACL
         ingress:         
             - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
             - [500, 'tcp', 'allow', '24.239.105.213/32', null, null, 5000, 5000]
             - [600, 'tcp', 'allow', '24.196.25.139/32', null, null, 5000, 5000]
             - [700, 'tcp', 'allow', '73.99.116.234/32', null, null, 5000, 5000]
             - [800, 'tcp', 'allow', '98.204.70.130/32', null, null, 5000, 5000]
             - [900, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535, 65535]
             - [300, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
             - [400, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
         egress:
             - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80] 
             - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
             - [900, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
         state: 'present'
    - name: "Create private acl"
      ec2_vpc_nacl:
         vpc_id: "{{ vpc.vpc.id }}"
         name: private-acl
         subnets: 
             - "{{ public_subnet.subnet.id }}"
         tags:
           Name: Module5privateACL
         ingress:
             - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 5432, 5432]
             - [500, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
         egress:
             - [900, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
         state: 'present'
    - name: Create NAT gateway
      ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnet.subnet.id }}"
        if_exist_do_not_create: true
        state: present
        wait: yes
      register: nat
    - name: Create ig-postgres security group
      ec2_group:
         name: Module5-postgres-sg
         description: postgres security group
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
           - proto: tcp
             ports:
               - 5432
             cidr_ip: 0.0.0.0/0
             rule_desc: allow all to ports 5432
         state: present
    - name: Create ig-postgres-tag security group
      ec2_group:
         name: Module5-ig-postgres-tag-sg
         description: postgres tag security group
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
           - proto: tcp
             ports:
               - 5432
         rules_egress:
           - proto: tcp
             ports: 
               - 5432
         state: present
    - name: Create nginx security group
      ec2_group:
         name: Module5-nginx-sg
         description: nginx security group
         vpc_id: "{{ vpc.vpc.id }}"
         rules:
           - proto: tcp
             ports: 80
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             ports: 22
             cidr_ip: 0.0.0.0/0
         rules_egress:
           - proto: tcp
             from_port: 0
             to_port: 65535
             cidr_ip: 0.0.0.0/0
         state: present
    - rds_subnet_group:
        state: present
        name: ig-private-dbgrp 
        description: security group for db
        subnets:
          - "{{ subnet_privateOne.subnet.id }}" 
          - "{{ subnet_privateTwo.subnet.id }}"
    - name: Find ec2 launch template
      ec2_launch_template:
         name: "java-image-gallery-lt"
         default_version: latest
         instance_type: t2.micro
    - name: Create load balancer
      elb_application_lb:
        name: image-gallery-lb
        subnets:
          - "{{ subnet_privateOne.subnet.id }}"
          - "{{ subnet_privateTwo.subnet.id }}"
        listeners:
          - Protocol: tcp 
            Port: 80 
            DefaultActions:
             - Type: forward # Required.
               TargetGroupName: # Required. The name of the target group
          - Protocol: tcp
            Port: 443
            DefaultActions:
             - Type: forward # Required.
               TargetGroupName: 
        state: present
        security_groups: 'Module5-developer-sg'
    - elb_target_group:
        name: ig-targetgroup
        protocol: tcp
        port: 80
        health_check_protocol: http
        stickiness_enabled: no
        stickiness_type: source_ip
        vpc_id: " {{ vpc.vpc.id }} "
        state: present 
    - name: Create ASG
      ec2_asg:
         name: Module5-imageGallery-asg
         launch_template:
           launch_template_name: java-image-gallery-lt
         desired_capacity: 1
         min_size: 1
         max_size: 4
         target_group_arns: 
           - " {{ ig_target_group.target_group_arn }} "
         vpc_zone_identifier: " {{ public_subnet.subnet.id }} "
         health_check_period: 300
         tags: 
           - Name: Module5-asg
         wait_for_instances: yes
         state: present
    - name: Create RDS
      rds:
        command: create
        instance_name: module-5-image-gallery-database
        db-gine: postgres
        region: us-east-2
        size: "10"
        instance_type: db.t2.micro
        multi_zone: no
        subnet: ""
        vpc_security_groups: " {{ sg_postgres.group_id }}"
        username: postgres
        password: anthony
        db_name: image_gallery
        tags: 
          Name: mod5-ig-db
          Module: 5
        register: ig_db 
